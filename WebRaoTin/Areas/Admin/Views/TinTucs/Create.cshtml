@model WebRaoTin.ViewModel.TinTucsViewModel



@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "TinTucs", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>TinTuc</h4>
    <hr />

    <div class="row rowbtn-create">
        <div  title="nhấn vào để đăng tin theo chủ đề bạn chọn" class="col img-dv" id = "boxDV" onclick="clickDV()">Dịch vụ</div>
        <div  title="nhấn vào để đăng tin theo chủ đề bạn chọn" class="col img-vl" id = "boxVL" onclick="clickVL()">Tìm việc</div>   
        <div  title="nhấn vào để đăng tin theo chủ đề bạn chọn" id = "boxSP" class="col img-sp" onclick="clickSP()">Sản phẩm</div>
        <div  title="nhấn vào để đăng tin theo chủ đề bạn chọn" id = "boxBDS" class="col img-bds" onclick="clickBDS()" >Bất động sản</div>   
    </div>

    <div class="form-group">
        <select class="target" id="LuaChon" name="LuaChon" aria-invalid="false">
            <option value="0"> ======Xin hãy chọn loại tin tức=======</option>
            <option value="1"> Sản Phẩm</option>
            <option value="2"> Dịch Vụ</option>
            <option value="3"> Bất Động Sản</option>
            <option value="4"> Việc Làm</option>
        </select>
        @Html.ValidationMessageFor(model => model.LuaChon, "", new { @class = "text-danger" })
    </div>

    @*Tin tức*@

    <div class='response5' data-response="op5">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>




        <div class="form-group">
            @Html.LabelFor(model => model.EndDayTinTucs, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.EndDayTinTucs, new
               {
                   @type = "date",
                   @class = "form-control datepicker"
               })
                @Html.ValidationMessageFor(model => model.EndDayTinTucs, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Contract, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Contract, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Contract, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContractPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContractPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContractPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>



    @* Không chọn gì *@
    <div class='response0' data-response="op0">


    </div>

    @* Sản phẩm *@

<div class='response1' data-response="op1">
    @*
            <div class="form-group">
            @Html.LabelFor(model => model.NameSanPham, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameSanPham, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameSanPham, "", new { @class = "text-danger" })
            </div>
        </div>
    *@



    <div class="form-group">
        @Html.LabelFor(model => model.DescriptionSanPham, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.DescriptionSanPham, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DescriptionSanPham, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="LuaChon">Chọn loại sản phẩm:</label>
        <select class="form-control valid" id="IdLoaiSanPham" name="IdLoaiSanPham" aria-invalid="false">
            @for (int i = 0; i < @ViewBag.SLLoaiSanPhams; i++)
            {
                <option value=@ViewBag.LoaiSanPhams[i].Id> @ViewBag.LoaiSanPhams[i].Name</option>
            }
        </select>
        <span class="field-validation-valid text-danger" data-valmsg-for="IdLoaiSanPham" data-valmsg-replace="true"></span>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PriceSanPham, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.PriceSanPham, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PriceSanPham, "", new { @class = "text-danger" })
        </div>
    </div>

   

    <div class="form-group">
        @Html.LabelFor(model => model.LocationSanPham, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LocationSanPham, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LocationSanPham, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.ImageSanPham, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="wrapper col-md-10">
            <input type="file" value="" name="image1" id="image1" required title="Chọn đường dẫn hình ảnh" onchange="Images1FileAsURL()" multiple />
            <div id="displayImg1"></div>
        </div>
    </div>
</div>
    
    @* Dịch Vụ *@

<div class='response2' data-response="op2">
    @*
           <div class="form-group">
            @Html.LabelFor(model => model.NameDichVu, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameDichVu, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameDichVu, "", new { @class = "text-danger" })
            </div>
        </div>
    *@



    <div class="form-group">
        @Html.LabelFor(model => model.DescriptionDichVu, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.DescriptionDichVu, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DescriptionDichVu, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="LuaChon">Chọn loại dịch vụ:</label>
        <select class="form-control valid" id="IdLoaiDichVu" name="IdLoaiDichVu" aria-invalid="false">
            @for (int i = 0; i < @ViewBag.SLLoaiDichVus; i++)
            {
                <option value=@ViewBag.LoaiDichVus[i].Id> @ViewBag.LoaiDichVus[i].Name</option>
            }
        </select>
        <span class="field-validation-valid text-danger" data-valmsg-for="IdLoaiDichVu" data-valmsg-replace="true"></span>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PriceDichVu, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PriceDichVu, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PriceDichVu, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.LocationDichVu, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LocationDichVu, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LocationDichVu, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageDichVu, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="wrapper col-md-10">
            <input type="file" value="" name="image2" id="image2" required title="Chọn đường dẫn hình ảnh" onchange="Images2FileAsURL()" multiple />
            <div id="displayImg2"></div>
        </div>
    </div>
</div>


    @* Bất Động Sản *@

<div class='response3' data-response="op3">
    @*
            <div class="form-group">

        <div class="form-group">
            @Html.LabelFor(model => model.DescriptionBatDongSan, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.DescriptionBatDongSan, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DescriptionBatDongSan, "", new { @class = "text-danger" })
            </div>
        </div>
    *@



    <div class="form-group">
        @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="LuaChon">Chọn loại bất động sản:</label>
        <select class="form-control valid" id="IdLoaiBatDongSan" name="IdLoaiBatDongSan" aria-invalid="false">
            @for (int i = 0; i < @ViewBag.SLLoaiBatDongSans; i++)
            {
                <option value=@ViewBag.LoaiBatDongSans[i].Id> @ViewBag.LoaiBatDongSans[i].Name</option>
            }
        </select>
        <span class="field-validation-valid text-danger" data-valmsg-for="IdLoaiBatDongSan" data-valmsg-replace="true"></span>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PriceBatDongSan, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PriceBatDongSan, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PriceBatDongSan, "", new { @class = "text-danger" })
        </div>
    </div>

   

    <div class="form-group">
        @Html.LabelFor(model => model.LocationBatDongSan, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LocationBatDongSan, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LocationBatDongSan, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageBatDongSan, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" value="" name="image3" id="image3" required title="Chọn đường dẫn hình ảnh" onchange="Images3FileAsURL()" multiple />
            <div id="displayImg3"></div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.VideoBatDongSan, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="wrapper col-md-10">
            <input type="file" value="" name="video" id="video" required title="Chọn đường dẫn Video" />

        </div>
    </div>
</div>

    @* Việc Làm *@
<div class='response4' data-response="op4">
    @*
            <div class="form-group">
            @Html.LabelFor(model => model.NameViecLam, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameViecLam, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NameViecLam, "", new { @class = "text-danger" })
            </div>
        </div>
    *@


    <div class="form-group">
        @Html.LabelFor(model => model.DescriptioViecLamn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.DescriptioViecLamn, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DescriptioViecLamn, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2" for="LuaChon">Chọn loại việc làm:</label>
        <select class="form-control valid" id="IdLoaiViecLam" name="IdLoaiViecLam" aria-invalid="false">
            @for (int i = 0; i < @ViewBag.SLLoaiViecLams; i++)
            {
                <option value=@ViewBag.LoaiViecLams[i].Id> @ViewBag.LoaiViecLams[i].Name</option>
            }
        </select>
        <span class="field-validation-valid text-danger" data-valmsg-for="IdLoaiViecLam" data-valmsg-replace="true"></span>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Require, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Require, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Require, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Benefit, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Benefit, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Benefit, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
        </div>
    </div>

   

    <div class="form-group">
        @Html.LabelFor(model => model.LocationViecLam, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.LocationViecLam, 10, 50, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LocationViecLam, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageViecLam, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="wrapper col-md-10">
            <input type="file" value="" name="image4" id="image4" required title="Chọn đường dẫn hình ảnh" onchange="Images4FileAsURL()" multiple />
            <div id="displayImg4"></div>

        </div>
    </div>
</div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    $(function () {
        $('.target').change(function () {
            if ($('.target').val == '0') {
                $('.response1').hide();
                $('.response2').hide();
                $('.response3').hide();
                $('.response0').hide();
                $('.response4').hide();
                $('.response5').hide();

                ;
            }
            else if ($('.target').val() == '1') {
                $('.response1').show();
                $('.response2').hide();
                $('.response3').hide();
                $('.response0').hide();
                $('.response4').hide();
                $('.response5').show();
                $('.target').hide();
            }
            else if ($('.target').val() == '2') {
                $('.response1').hide();
                $('.response2').show();
                $('.response3').hide();
                $('.response0').hide();
                $('.response4').hide();
                $('.response5').show();
                $('.target').hide();
            }
            else if ($('.target').val() == '3') {
                $('.response1').hide();
                $('.response2').hide();
                $('.response3').show();
                $('.response0').hide();
                $('.response4').hide();
                $('.response5').show();
                $('.target').hide();
            }

            else if ($('.target').val() == '4') {
                $('.response1').hide();
                $('.response2').hide();
                $('.response3').hide();
                $('.response0').hide();
                $('.response4').show();
                $('.response5').show();
                $('.target').hide();
            }
        });
    });

   

    function Images1FileAsURL() {
        var fileSelected = document.getElementById('image1').files;
        if (fileSelected.length > 0) {
            for (var i = 0; i < fileSelected.length; i++) {
                var fileToLoad = fileSelected[i];
                var fileReader = new FileReader();
                fileReader.onload = function (fileLoaderEvent) {
                    var srcData = fileLoaderEvent.target.result;
                    var newImage = document.createElement('img');
                    newImage.src = srcData;
                    document.getElementById('displayImg1').innerHTML += newImage.outerHTML;
                }
                fileReader.readAsDataURL(fileToLoad);
            }

        }
    }

    function Images2FileAsURL() {
        var fileSelected = document.getElementById('image2').files;
        if (fileSelected.length > 0) {
            for (var i = 0; i < fileSelected.length; i++) {
                var fileToLoad = fileSelected[i];
                var fileReader = new FileReader();
                fileReader.onload = function (fileLoaderEvent) {
                    var srcData = fileLoaderEvent.target.result;
                    var newImage = document.createElement('img');
                    newImage.src = srcData;
                    document.getElementById('displayImg2').innerHTML += newImage.outerHTML;
                }
                fileReader.readAsDataURL(fileToLoad);
            }

        }
    }

    function Images3FileAsURL() {
        var fileSelected = document.getElementById('image3').files;
        if (fileSelected.length > 0) {
            for (var i = 0; i < fileSelected.length; i++) {
                var fileToLoad = fileSelected[i];
                var fileReader = new FileReader();
                fileReader.onload = function (fileLoaderEvent) {
                    var srcData = fileLoaderEvent.target.result;
                    var newImage = document.createElement('img');
                    newImage.src = srcData;
                    document.getElementById('displayImg3').innerHTML += newImage.outerHTML;
                }
                fileReader.readAsDataURL(fileToLoad);
            }

        }
    }

    function Images4FileAsURL() {
        var fileSelected = document.getElementById('image4').files;
        if (fileSelected.length > 0) {
            for (var i = 0; i < fileSelected.length; i++) {
                var fileToLoad = fileSelected[i];
                var fileReader = new FileReader();
                fileReader.onload = function (fileLoaderEvent) {
                    var srcData = fileLoaderEvent.target.result;
                    var newImage = document.createElement('img');
                    newImage.src = srcData;
                    document.getElementById('displayImg4').innerHTML += newImage.outerHTML;
                }
                fileReader.readAsDataURL(fileToLoad);
            }

        }
    }

    function clickDV() {
      

        $("#boxDV").hide();
        $("#boxVL").hide();
        $("#boxSP").hide();
        $("#boxBDS").hide();
        $('#LuaChon').val('2').trigger('change');
        
    }

    function clickVL() {

        
        $("#boxDV").hide();
        $("#boxVL").hide();
        $("#boxSP").hide();
        $("#boxBDS").hide();
        $('#LuaChon').val('4').trigger('change');


    }
    function clickSP() {

        
        $("#boxDV").hide();
        $("#boxVL").hide();
        $("#boxSP").hide();
        $("#boxBDS").hide();
        $('#LuaChon').val('1').trigger('change');


    }

    function clickBDS() {

        
        $("#boxDV").hide();
        $("#boxVL").hide();
        $("#boxSP").hide();
        $("#boxBDS").hide();
        $('#LuaChon').val('3').trigger('change');
    }

</script>
